{"version":3,"sources":["TabEditor.js","TabNavigation.js","App.js","index.js"],"names":["divStyle","height","editorOptions","renderWhitespace","rulers","showToast","text","toast","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","writeContentToFile","fileHandle","content","a","createWritable","writable","write","close","TabEditor","props","editorRef","useRef","monacoRef","fetchFile","getFile","file","nodeCloseEventHandler","e","console","editorName","current","getModel","getValue","editor","monaco","log","contents","setValue","node","setEventListener","window","showSaveFilePicker","style","newestOnTop","rtl","pauseOnFocusLoss","onClick","setModelLanguage","updateOptions","wordWrap","theme","onMount","options","TabNavigation","useState","dirHandle","setDirHandle","fileHandles","setFileHandles","fileList","map","handle","handleLoadFile","name","showDirectoryPicker","_dirHandle","_fileHandles","values","entry","kind","push","width","flexid","generator","BASE","json","global","borders","type","location","children","enableClose","altName","component","icon","layout","weight","App","factory","getComponent","config","getConfig","getName","_fileHandle","onRenderTabSet","renderValues","stickyButtons","src","alt","title","className","handleNewTabClick","state","model","FlexLayout","Model","fromJson","layoutRef","React","createRef","bind","this","setState","addTabToActiveTabSet","Layout","ref","Component","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.72197825.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\r\nimport Editor from \"@monaco-editor/react\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\n\r\nconst divStyle = {\r\n  height: \"100%\"\r\n};\r\n\r\nconst editorOptions = {\r\n  renderWhitespace: \"all\",\r\n  rulers: [80, 120]\r\n};\r\n\r\nfunction showToast(text) {\r\n  toast.info(text, {\r\n    position: \"bottom-right\",\r\n    autoClose: 2000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: false,\r\n    draggable: true,\r\n    progress: undefined\r\n  });\r\n}\r\n\r\n/**\r\n * Writes text content to FileSystemFileHandle\r\n * https://wicg.github.io/file-system-access/#api-filesystemfilehandle\r\n * https://web.dev/file-system-access/\r\n * @param {*} fileHandle\r\n * @param {*} content\r\n */\r\nasync function writeContentToFile(fileHandle, content) {\r\n  // Create a FileSystemWritableFileStream to write to.\r\n  const writable = await fileHandle.createWritable();\r\n  // Write the contents of the file to the stream.\r\n  await writable.write(content);\r\n  // Close the file and write the contents to disk.\r\n  await writable.close();\r\n  showToast(\"Saved\");\r\n}\r\n\r\n/**\r\n * Wrapper for Monaco Editor\r\n * props available are\r\n * fileHandle\r\n * dirHandle\r\n * editorName\r\n * node\r\n * @param {*} props\r\n */\r\nfunction TabEditor(props) {\r\n  // https://web.dev/file-system-access/\r\n  const editorRef = useRef(null);\r\n  const monacoRef = useRef(null);\r\n\r\n  async function fetchFile(fileHandle) {\r\n    const file = await fileHandle.getFile();\r\n    return await file.text();\r\n  }\r\n\r\n  async function nodeCloseEventHandler(e) {\r\n    console.info(props.editorName + \" closed\");\r\n    // TODO, how to prevent close\r\n    if (editorRef.current.getModel().getValue() !== \"\") {\r\n    }\r\n  }\r\n\r\n  async function handleEditorDidMount(editor, monaco) {\r\n    editorRef.current = editor;\r\n    monacoRef.current = monaco;\r\n    // if fileHandle exists, try to load the contents from disk\r\n    if (props.fileHandle) {\r\n      console.log(props.fileHandle);\r\n      const contents = await fetchFile(props.fileHandle);\r\n      editorRef.current.getModel().setValue(contents);\r\n    } else {\r\n      // try to load from local storage\r\n      console.log(props.editorName);\r\n    }\r\n    // Add close event listener\r\n    props.node.setEventListener(\"close\", nodeCloseEventHandler);\r\n  }\r\n\r\n  function handleWordWrapOn() {\r\n    editorRef.current.updateOptions({ wordWrap: \"on\" });\r\n  }\r\n\r\n  function handleWordWrapOff() {\r\n    editorRef.current.updateOptions({ wordWrap: \"off\" });\r\n  }\r\n\r\n  async function saveButtonHandler() {\r\n    if (props.fileHandle) {\r\n      writeContentToFile(\r\n        props.fileHandle,\r\n        editorRef.current.getModel().getValue()\r\n      );\r\n    } else {\r\n      // TODO: Save new file\r\n      const fileHandle = await window.showSaveFilePicker({});\r\n      writeContentToFile(fileHandle, editorRef.current.getModel().getValue());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change Monaco editor to VB language\r\n   */\r\n  function setVbHandler() {\r\n    monacoRef.current.editor.setModelLanguage(\r\n      editorRef.current.getModel(),\r\n      \"vb\"\r\n    );\r\n    showToast(\"Changed to VB\");\r\n  }\r\n\r\n  /**\r\n   * Change Monaco editor to SQL language\r\n   */\r\n  function setSqlHandler() {\r\n    monacoRef.current.editor.setModelLanguage(\r\n      editorRef.current.getModel(),\r\n      \"sql\"\r\n    );\r\n    showToast(\"Changed to SQL\");\r\n  }\r\n\r\n  return (\r\n    <div style={divStyle}>\r\n      <ToastContainer\r\n        position=\"bottom-right\"\r\n        autoClose={2000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover={false}\r\n      />\r\n      <button onClick={saveButtonHandler}>Save</button>\r\n      <button onClick={setVbHandler}>Set VB Language</button>\r\n      <button onClick={setSqlHandler}>Set SQL Language</button>\r\n      <button onClick={handleWordWrapOn}>Wordwrap On</button>\r\n      <button onClick={handleWordWrapOff}>Wordwrap Off</button>\r\n      <Editor\r\n        height=\"100%\"\r\n        theme=\"vs-dark\"\r\n        onMount={handleEditorDidMount}\r\n        // onChange={handleEditorChange}\r\n        options={editorOptions}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TabEditor;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction TabNavigation(props) {\r\n  const [dirHandle, setDirHandle] = useState();\r\n  const [fileHandles, setFileHandles] = useState([]);\r\n  const fileList = fileHandles.map((handle) => (\r\n    <li key={handle.name} onClick={() => handleListClick(handle)}>\r\n      {handle.name}\r\n    </li>\r\n  ));\r\n\r\n  function handleListClick(fileHandle) {\r\n    props.handleLoadFile(fileHandle, dirHandle);\r\n  }\r\n\r\n  async function handleClick(e) {\r\n    let _dirHandle = await window.showDirectoryPicker();\r\n    setDirHandle(_dirHandle);\r\n    let _fileHandles = [];\r\n    for await (const entry of _dirHandle.values()) {\r\n      if (entry.kind === \"file\") {\r\n        _fileHandles.push(entry);\r\n      }\r\n    }\r\n    setFileHandles(_fileHandles);\r\n  }\r\n  return (\r\n    <div>\r\n      <button style={{ width: \"100%\" }} onClick={handleClick}>\r\n        Open File\r\n      </button>\r\n      <ul>{dirHandle && fileList}</ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TabNavigation;\r\n","import \"./styles.css\";\nimport React from \"react\";\nimport FlexLayout from \"flexlayout-react\";\nimport TabEditor from \"./TabEditor\";\nimport Navigation from \"./TabNavigation\";\nimport { generator, BASE } from \"flexid\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst flexid = generator(BASE[\"58\"]);\n\n// TODO: Load existing storage\nlet json = {\n  global: {},\n  borders: [\n    {\n      type: \"border\",\n      location: \"left\",\n      children: [\n        {\n          type: \"tab\",\n          enableClose: false,\n          name: \"Navigation\",\n          altName: \"navigation\",\n          component: \"navigation\",\n          icon: \"images/folder.svg\"\n        }\n      ]\n    }\n  ],\n  layout: {\n    type: \"row\",\n    weight: 100,\n    children: [\n      {\n        type: \"tabset\",\n        weight: 100,\n        children: []\n      }\n    ]\n  }\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { model: FlexLayout.Model.fromJson(json), fileHandles: {} };\n    // creating react refs: https://reactjs.org/docs/refs-and-the-dom.html\n    this.layoutRef = React.createRef();\n    // This binding is necessary to make `this` work in the callback\n    // https://reactjs.org/docs/handling-events.html\n    this.handleNewTabClick = this.handleNewTabClick.bind(this);\n    this.handleLoadFile = this.handleLoadFile.bind(this);\n  }\n\n  handleLoadFile(fileHandle, dirHandle) {\n    this.setState({\n      fileHandles: {\n        ...this.state.fileHandles,\n        [fileHandle.name]: fileHandle\n      }\n    });\n    this.layoutRef.current.addTabToActiveTabSet({\n      type: \"tab\",\n      component: \"editor\",\n      name: fileHandle.name,\n      config: {\n        _fileHandle: fileHandle,\n        _dirHandle: dirHandle\n      }\n    });\n  }\n\n  handleNewTabClick(node) {\n    this.layoutRef.current.addTabToActiveTabSet({\n      type: \"tab\",\n      component: \"editor\",\n      name: flexid()\n    });\n  }\n\n  factory = (node) => {\n    let component = node.getComponent();\n    let config = node.getConfig();\n    let editorName = node.getName();\n    if (component === \"editor\") {\n      if (config) {\n        return (\n          <TabEditor\n            fileHandle={config._fileHandle}\n            dirHandle={config._dirHandle}\n            editorName={editorName}\n            node={node}\n          />\n        );\n      }\n      return <TabEditor editorName={editorName} node={node} />;\n    } else if (component === \"navigation\") {\n      return <Navigation handleLoadFile={this.handleLoadFile} />;\n    }\n  };\n\n  onRenderTabSet = (node, renderValues) => {\n    renderValues.stickyButtons.push(\n      <img\n        src=\"images/add.svg\"\n        alt=\"Add\"\n        key=\"Add button\"\n        title=\"Add Tab (using onRenderTabSet callback, see Demo)\"\n        style={{ width: \"1.1em\", height: \"1.1em\" }}\n        className=\"flexlayout__tab_toolbar_button\"\n        onClick={() => this.handleNewTabClick(node)}\n      />\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleNewTabClick}>Add</button>\n        <FlexLayout.Layout\n          ref={this.layoutRef}\n          model={this.state.model}\n          factory={this.factory}\n          onRenderTabSet={this.onRenderTabSet}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}